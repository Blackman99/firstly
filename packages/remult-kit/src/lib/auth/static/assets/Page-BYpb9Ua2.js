import{S as E,i as O,s as S,d,v as j,t as g,a as _,n as l,b as v,c as G,e as D,f as I,g as M,h as L,j as K,k as h,m as Q,l as Y,o as Z,p as T,q as U,r as tt,u as V,w as W}from"./index-BjtlWb-h.js";function F(o){let t;const s={c:function(){t=g("ForgottenPassword")},l:function(i){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(i,n){_(i,t,n)},p:l,i:l,o:l,d:function(i){i&&v(t)}};return d("SvelteRegisterBlock",{block:s,id:F.name,type:"component",source:"",ctx:o}),s}function et(o,t){let{$$slots:s={},$$scope:e}=t;j("ForgottenPassword",s,[]);const i=[];return Object.keys(t).forEach(n=>{!~i.indexOf(n)&&n.slice(0,2)!=="$$"&&n!=="slot"&&console.warn(`<ForgottenPassword> was created with unknown prop '${n}'`)}),[]}class C extends E{constructor(t){super(t),O(this,t,et,F,S,{}),d("SvelteRegisterComponent",{component:this,tagName:"ForgottenPassword",options:t,id:F.name})}}function B(o){let t;const s={c:function(){t=g("Login")},l:function(i){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(i,n){_(i,t,n)},p:l,i:l,o:l,d:function(i){i&&v(t)}};return d("SvelteRegisterBlock",{block:s,id:B.name,type:"component",source:"",ctx:o}),s}function nt(o,t){let{$$slots:s={},$$scope:e}=t;j("Login",s,[]);const i=[];return Object.keys(t).forEach(n=>{!~i.indexOf(n)&&n.slice(0,2)!=="$$"&&n!=="slot"&&console.warn(`<Login> was created with unknown prop '${n}'`)}),[]}class X extends E{constructor(t){super(t),O(this,t,nt,B,S,{}),d("SvelteRegisterComponent",{component:this,tagName:"Login",options:t,id:B.name})}}function q(o){let t;const s={c:function(){t=g("Pin")},l:function(i){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(i,n){_(i,t,n)},p:l,i:l,o:l,d:function(i){i&&v(t)}};return d("SvelteRegisterBlock",{block:s,id:q.name,type:"component",source:"",ctx:o}),s}function ot(o,t){let{$$slots:s={},$$scope:e}=t;j("Pin",s,[]);const i=[];return Object.keys(t).forEach(n=>{!~i.indexOf(n)&&n.slice(0,2)!=="$$"&&n!=="slot"&&console.warn(`<Pin> was created with unknown prop '${n}'`)}),[]}class A extends E{constructor(t){super(t),O(this,t,ot,q,S,{}),d("SvelteRegisterComponent",{component:this,tagName:"Pin",options:t,id:q.name})}}const k="src/lib/modules/auth/Page.svelte";function H(o){let t,s,e,i,n,c,P,p=o[0].props.strings["auth.forgotPassword"]+"",r,N,b=JSON.stringify(o[0])+"",y,w,R,J;var m=o[1]==="login"?X:o[1]==="forgottenPassword"?C:A;function x(u,a){return{props:{remultKitData:u[0]},$$inline:!0}}m&&(e=G(m,x(o)));const z={c:function(){t=D("div"),s=D("div"),e&&I(e.$$.fragment),i=M(),n=D("div"),c=D("button"),P=g("Forgot your password? "),r=g(p),N=M(),y=g(b),L(s,"class","form s-NO-a_LAEXXH5"),K(s,k,11,2,260),K(c,k,19,4,463),L(n,"class","actions"),K(n,k,18,2,437),L(t,"class","wrapper s-NO-a_LAEXXH5"),K(t,k,10,0,236)},l:function(a){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(a,f){_(a,t,f),h(t,s),e&&Q(e,s,null),h(t,i),h(t,n),h(n,c),h(c,P),h(c,r),_(a,N,f),_(a,y,f),w=!0,R||(J=Y(c,"click",o[2],!1,!1,!1,!1),R=!0)},p:function(a,[f]){if(f&2&&m!==(m=a[1]==="login"?X:a[1]==="forgottenPassword"?C:A)){if(e){Z();const $=e;T($.$$.fragment,1,0,()=>{U($,1)}),tt()}m?(e=G(m,x(a)),I(e.$$.fragment),V(e.$$.fragment,1),Q(e,s,null)):e=null}else if(m){const $={};f&1&&($.remultKitData=a[0]),e.$set($)}(!w||f&1)&&p!==(p=a[0].props.strings["auth.forgotPassword"]+"")&&W(r,p),(!w||f&1)&&b!==(b=JSON.stringify(a[0])+"")&&W(y,b)},i:function(a){w||(e&&V(e.$$.fragment,a),w=!0)},o:function(a){e&&T(e.$$.fragment,a),w=!1},d:function(a){a&&(v(t),v(N),v(y)),e&&U(e),R=!1,J()}};return d("SvelteRegisterBlock",{block:z,id:H.name,type:"component",source:"",ctx:o}),z}function st(o,t,s){let{$$slots:e={},$$scope:i}=t;j("Page",e,[]);let{remultKitData:n}=t,c="login";o.$$.on_mount.push(function(){n===void 0&&!("remultKitData"in t||o.$$.bound[o.$$.props.remultKitData])&&console.warn("<Page> was created without expected prop 'remultKitData'")});const P=["remultKitData"];Object.keys(t).forEach(r=>{!~P.indexOf(r)&&r.slice(0,2)!=="$$"&&r!=="slot"&&console.warn(`<Page> was created with unknown prop '${r}'`)});const p=()=>s(1,c="forgottenPassword");return o.$$set=r=>{"remultKitData"in r&&s(0,n=r.remultKitData)},o.$capture_state=()=>({ForgottenPassword:C,Login:X,Pin:A,remultKitData:n,view:c}),o.$inject_state=r=>{"remultKitData"in r&&s(0,n=r.remultKitData),"view"in r&&s(1,c=r.view)},t&&"$$inject"in t&&o.$inject_state(t.$$inject),[n,c,p]}class at extends E{constructor(t){super(t),O(this,t,st,H,S,{remultKitData:0}),d("SvelteRegisterComponent",{component:this,tagName:"Page",options:t,id:H.name})}get remultKitData(){throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set remultKitData(t){throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}export{at as default};
